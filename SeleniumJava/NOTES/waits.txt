
Functions in selenium to make webdriver wait for a specific time or for some condition to be true

Why waits are required in Automation Testing.

Sometimes the automation script is faster than the browser loading time or objects render time on browser - no such element
Different elements may load at different time interval
So Webdriver script and browser events may not be synchronous at all times

Types of waits
implicit
explicit
fluent

Implicit Wait
Useful when there is some gap in loading time of the web page and web elements
An implicit wait makes WebDriver to poll the DOM for a certain amount of time when trying to find an element or elements if they are not immediately available

//driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));

default setting is 0 (disabled)
Once set, the implicit wait is set for the entire life of the session
Polling frequency  - 500 ms

Explicit Wait
Useful when there you need to wait until some condition is met
Makes WebDriver to wait until a certain condition is true

import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(20));
wait.until(ExpectedConditions.elementToBeClickable(By.xpath("")));

alert is present
element exists
element is visible
title contains
title is
element staleness
visible text


Fluent Wait

similar to Explicit wait, i.e. wait for a certain duration until a condition is met
Differences

Polling frequency - can change as per need
Ignore Exception - in case element is not found, can ignore any exception like ‘NoSuchElement’ exception etc.

//Note: WebDriver should be enclosed in brackets in below line (similar to List and Set Class)
Wait WebDriver fluentWait = new FluentWait WebDriver (driver)
          .withTimeout(Duration.ofSeconds(10)) 
          .pollingEvery(Duration.ofSeconds(1)) 
          .ignoring(NoSuchElementException.class);

fluentWait.until(ExpectedConditions.elementToBeClickable(By.xpath("")))